// 1. for stdlib: inline-case-ignore only EmbedStruct-NoTag,EmbedStructPtr-NoTag success
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(Embed-NoTag): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(Embed-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(EmbedPtr-NoTag): MEM(&{0x1400021c1b0})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline-CI)->M(FieldPtr-Tagged): MEM(&{<nil>})

// 2. for stdlib: field-case-count only Tagged success
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(Field-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(Embed-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(EmbedPtr-Tagged): MEM(&{0x1400021cdb0})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(FieldPtr-Tagged): MEM(&{0x1400021ce10})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(Embed-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Field)->M(Field-UnTag): MEM(&{{0  }})

// 3. for stdlib: field-case-ignore Tagged success as well, as-well-as:2
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(EmbedPtr-Tagged): MEM(&{0x1400021d110})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(Embed-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(Field-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(FieldPtr-Tagged): MEM(&{0x1400021d350})
    safe_json_test.go:458: PVD(stdlib), C(Field-CI)->M(Embed-NoTag): MEM(&{{0  }})

// 4. for stdlib: as-well-as:1
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(EmbedPtr-NoTag): MEM(&{0x1400021d5f0})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(FieldPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(Embed-NoTag): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(stdlib), C(Inline)->M(Embed-Tagged): MEM(&{{0  }})

// 5. json-iter: std-compatible-mode: as-well-as:1
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(Embed-NoTag): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(Embed-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(EmbedPtr-NoTag): MEM(&{0x14000230ae0})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline)->M(FieldPtr-Tagged): MEM(&{<nil>})

// 6. json-iter: std-compatible-mode: as-well-as:1
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(EmbedPtr-NoTag): MEM(&{0x14000231f50})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(FieldPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(Embed-NoTag): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(Embed-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Inline-CI)->M(Embed-UnTag): MEM(&{{0  }})

// 7. json-iter: std-compatible-mode: as-well-as:2
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(Embed-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(Embed-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(EmbedPtr-Tagged): MEM(&{0x1400023a480})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(Field-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(FieldPtr-Tagged): MEM(&{0x1400023a570})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field)->M(Embed-UnTag): MEM(&{{0  }})

// 8. json-iter: std-compatible-mode: as-well-as:2
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(Field-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(Embed-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(FieldPtr-Tagged): MEM(&{0x1400023a8a0})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(Embed-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/std), C(Field-CI)->M(EmbedPtr-Tagged): MEM(&{0x1400023a990})

// 9. json-iter: favor-mode: as-well-as:1
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(FieldPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(Embed-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(Embed-NoTag): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(EmbedPtr-NoTag): MEM(&{0x14000246fc0})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline)->M(FieldPtr-NoTag): MEM(&{<nil>})

// 10. json-iter: favor-mode: no-success-case
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(FieldPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(Embed-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(Embed-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Inline-CI)->M(FieldPtr-NoTag): MEM(&{<nil>})

// 11. json-iter: favor-mode: as-well-as:2
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(EmbedPtr-Tagged): MEM(&{0x14000252240})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(Field-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(FieldPtr-Tagged): MEM(&{0x14000252330})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(Embed-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(Embed-Tagged): MEM(&{{666 E2Value }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field)->M(Field-Tagged): MEM(&{{666 E2Value }})

// 12. json-iter: favor-mode: no-success-case
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(Field-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(FieldPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(EmbedPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(Field-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(FieldPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(FieldPtr-Tagged): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(Embed-NoTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(Embed-UnTag): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(Embed-Tagged): MEM(&{{0  }})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(EmbedPtr-NoTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(EmbedPtr-UnTag): MEM(&{<nil>})
    safe_json_test.go:458: PVD(json-iterator/favor), C(Field-CI)->M(Field-UnTag): MEM(&{{0  }})