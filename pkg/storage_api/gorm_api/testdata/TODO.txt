1. multi_tenants Plugin
> By self defined tag `mt:"tenant"` or `self_define:"tenant"`
mt:
    - Create:
        - ✅✅✅ set value
    - Delete,Update,Query:
        - ✅✅✅ where tenant clause Eq
        - ✅✅✅ where tenant clause IN
        - ✅✅✅ where tenant clause StatementModifier
            - ✅✅✅ Full BUG Fixed

SessionConfig
    - default: Config.GlobalCfg
    - SessionCfg: SessionConfig{}
        - ✅✅✅ SkipTenant
        - ✅✅✅ DisableFieldDup
        - ✅✅✅ ComplexFieldDup
        - ✅✅✅ DeleteAllowTenantAll
        - ✅✅✅ BeforeDeleteDoQuery
        - ✅✅✅ UpdateAllowTenantAll
        - ✅✅✅ UpdateOmitMapZeroElemKey
        - UpdateOmitMapUnknownKey
        - UpdateMapSetPkToClause
        - ✅✅✅ AfterCreateShowTenant
        - ✅✅✅ BeforeQueryOmitField -> use with gorm tag `->:false`
        - ✅✅✅ AfterQueryShowTenant
        - ✅✅✅ CreateMapCallHooks
        - ✅✅✅ UpdateMapCallHooks
        - ✅❌❌ AfterFindMapCallHooks

FieldDup
    - ✅✅✅ Create OneStruct
    - ✅✅✅ Create StructList
    - ✅✅✅ Create map[string]any
    - ✅✅✅ Create []map[string]any
        - ✅✅✅ Clause Build BUG Fixed, clause share with tenant clause
    - ✅✅✅ Update OneColumn
    - ✅✅✅ Updates OneStruct
    - ✅✅✅ Updates map[string]any

Create
    - ✅✅✅ After Create Map, WriteBack AutoIncrement PrimaryKey To map[string]any, *map[string]any
    - ✅✅✅ After Create Map, WriteBack AutoIncrement PrimaryKey To *[]map[string]any
    - ✅✅✅ Before Create Map, Default Values Set To map[string]any, *map[string]any, *[]map[string]any

chainable_api
    - ✅✅✅ UseTableParseSchema: .Table() to replacement of .Model()

2. clause_checker Plugin
    - ✅✅✅ expr, exprList
        - ✅✅✅ exprList,expr illegal or len = 0, omit clause
    - ✅✅✅ orderBy, orderByList
        - ✅✅✅ orderByList,column len = 0, omit clause
    - ✅✅✅ groupBy
    - ✅✅✅ limit
    - ✅✅✅ RowOrRawClause row and raw clause Builder and clause Checker
        - ✅✅✅ SkipRawOrRow, (Fix BUG: when migrate table)
    - TODO: more error case, more expr case

Reinforce:

3. multi_tenants Plugin Reinforce
    > not tag define, but add a new type: TenantID, realized by:
        - type TenantID sql.Null[uint]
        - schema.CreateClausesInterface
        - schema.QueryClausesInterface
        - schema.UpdateClausesInterface
        - schema.DeleteClausesInterface

4. Hooks Reinforce
    > support type: map[string]any, *map[string]any, *[]map[string]any
        - modify CallbacksInterface with Map Type
        - ✅✅✅ callbacks.BeforeCreateInterface
        - ✅✅✅ callbacks.AfterCreateInterface
        - ✅✅✅ callbacks.BeforeUpdateInterface
        - ✅✅✅ callbacks.AfterUpdateInterface
        - callbacks.BeforeDeleteInterface
        - callbacks.AfterDeleteInterface
        - ✅✅✅ callbacks.AfterFindInterface

5. ParseSchema Reinforce
    > support more flexible unnamed type or named but not known schema type
        - ✅✅✅ keep known Schema .Table() same meanings with .Model()
            var appUser AppUser // AppUser is a known Schema
            - tx.Table(`tbl_app_user`).Find(&appUser)
            - tx.Model(&AppUser{}).Find(&appUser)
            - tx.Find(&appUser)
        - ✅✅✅ replace unknown Schema .Find(&appUserOtherStruct) by .Table(`tbl_app_user`)
            var appUserOtherStruct appUserStructV2 // AppUser is a known Schema, appUserStructV2 is an unknown or temp Schema
            - tx.Table(`tbl_app_user`).Find(&appUserOtherStruct)
            - tx.Model(&AppUser{}).Find(&appUserOtherStruct)
            - tx.Find(&appUserOtherStruct)
        - ✅✅✅ Parse Bug Fix, SessionCfg .Table() But no Schema Parsed

6. Returning Clause by QueryBeforeDelete
    - ✅❌❌ Select Fields in Returning Columns
    - ✅❌❌ BeforeDelete
    - ✅❌❌ BeforeUpdate